name: maven-publish.yml
on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - "pom.xml"

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'
          cache: 'maven'

      - name: Get version from pom.xml
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Create GitHub tag (If it doesn't exist yet)
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag v${{ steps.get_version.outputs.version }} || echo "Tag exists"
          git push origin v${{ steps.get_version.outputs.version }} || echo "Tag already pushed"
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          body: |
            üß© **Maven Dependency (via JitPack)**
            The binary (.dll / .so / .dylib) files should be downloaded automatically on first startup,
            if that doesn't work, however, just create a folder called "lib" and copy the needed file there.
            To use this library via [JitPack](https://jitpack.io), add the following to your `pom.xml`:
            
            ```xml
            <dependencies>
              <dependency>
                <groupId>com.github.kuro-dev</groupId>
                <artifactId>olc-j-pixel-game-engine</artifactId>
                <version>${{ env.VERSION }}</version>
              </dependency>
            </dependencies>
            <repositories>
              <repository>
                <id>jitpack.io</id>
                <url>https://jitpack.io</url>
              </repository>
            </repositories>
            ```
            üìÅ This release includes:
             - compiled `.jar`, `.javadoc.jar`
          name: Release ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          files: |
            target/*.jar
            target/*.javadoc.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  compile-macOS-libraries:
    runs-on: macos-latest
    needs: build-and-release
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Build macOS dylib
        run: |
          VERSION=${{ needs.build-and-release.outputs.VERSION }}
          mkdir -p lib
          BREW_PREFIX=$(brew --prefix)
          clang++ -dynamiclib -std=c++17 -fPIC \
            -Wno-return-type-c-linkage \
            -Wno-inconsistent-missing-override \
            -DGL_SILENCE_DEPRECATION \
            -Wno-macro-redefined\
            -include cassert\
            -DOLC_PGE_APPLICATION -DOLC_PLATFORM_GLUT \
            -DVERSION="\"${VERSION}\"" \
            -I${BREW_PREFIX}/include \
            -L${BREW_PREFIX}/lib \
            native/org_kurodev_pixelGameEngineFFM.cpp \
            -lpng \
            -o lib/liborg_kurodev_pixelGameEngineFFM.dylib \
            -framework Cocoa -framework OpenGL

      - name: Upload macOS dylib to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-and-release.outputs.VERSION }}
          files: |
            lib/*.dylib
          append_body: true
          body: |
            - MacOS .dylib file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  compile-linux-libraries:
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Linux build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            g++ libx11-dev libgl1-mesa-dev libglu1-mesa-dev libxrandr-dev \
            libxi-dev libxcursor-dev libxinerama-dev libxext-dev libpthread-stubs0-dev \
            libpng-dev

      - name: Build Linux shared library
        run: |
          VERSION=${{ needs.build-and-release.outputs.VERSION }}
          mkdir -p lib
          g++ -std=c++17 -fPIC \
            -DOLC_PGE_APPLICATION \
            -DVERSION="\"${VERSION}\"" \
            -shared \
            -o lib/liborg_kurodev_pixelGameEngineFFM.so \
            native/org_kurodev_pixelGameEngineFFM.cpp \
            -lX11 -lGL -lpng -lpthread -ldl

      - name: Upload Linux .so to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-and-release.outputs.VERSION }}
          files: lib/*.so
          append_body: true
          body: |
            - Linux .so file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  compile-windows-libraries:
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install MinGW cross-compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      - name: Build Windows DLL
        run: |
          VERSION=${{ needs.build-and-release.outputs.VERSION }}
          mkdir -p lib
          x86_64-w64-mingw32-g++ -std=c++17 \
            -DOLC_PGE_APPLICATION \
            -DVERSION="\"${VERSION}\"" \
            -shared \
            -o lib/org_kurodev_pixelGameEngineFFM.dll \
            native/org_kurodev_pixelGameEngineFFM.cpp \
            -static-libstdc++ -static-libgcc \
            -lopengl32 -lwinmm -lgdi32 -ldwmapi -lgdiplus -lshlwapi -pthread

      - name: Upload Windows .dll to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-and-release.outputs.VERSION }}
          files: lib/*.dll
          append_body: true
          body: |
            - Windows .dll file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

