name: Build and Release JAR from pom.xml

on:
  workflow_dispatch:

  push:
    branches:
      - master
    paths:
      - 'pom.xml'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'
          cache: 'maven'

      - name: Get version from pom.xml
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Create GitHub tag (ignore failure if tag exists)
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag v$VERSION || echo "Tag v$VERSION already exists, skipping tag creation"
          git push origin v$VERSION || echo "Tag v$VERSION already pushed, skipping push"
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
      - name: Build macOS dylib
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          mkdir -p lib
          clang++ -std=c++17 -fPIC -DOLC_PGE_APPLICATION -DVERSION="\"$VERSION\"" \
            -dynamiclib -o lib/liborg_kurodev_pixelGameEngineFFM.dylib native/org_kurodev_pixelGameEngineFFM.cpp \
            -framework Cocoa -framework OpenGL
      - name: Build native libraries via Docker
        run: |
          # Build Linux and Windows shared libraries
          mkdir -p lib
          docker build -o . .
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body: |
            üß© **Maven Dependency (via JitPack)**
            The binary (.dll / .so / .dylib) files should be downloaded automatically on first startup,
            if that doesn't work, however, just create a folder called "lib" and copy the needed file there.
            To use this library via [JitPack](https://jitpack.io), add the following to your `pom.xml`:
            
            ```xml
            <dependencies>
              <dependency>
                <groupId>com.github.kuro-dev</groupId>
                <artifactId>olc-j-pixel-game-engine</artifactId>
                <version>${{ env.VERSION }}</version>
              </dependency>
            </dependencies>
            <repositories>
              <repository>
                <id>jitpack.io</id>
                <url>https://jitpack.io</url>
              </repository>
            </repositories>
            ```

            üìÅ This release includes compiled `.jar`, `.javadoc.jar`, and native `.so` / `.dll` and `.dylib` files.
          name: Release ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          files: |
            target/*.jar
            target/*.javadoc.jar
            lib/*.so
            lib/*.dll
            lib/*.dylib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}